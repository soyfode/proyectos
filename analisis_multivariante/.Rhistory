x = as.data.frame(state.x77)
head(x)
# Número de estados y número de variables
dim(x)
nrow(x)
n.x = nrow(x)
p.x = ncol(x)
#################################################
############## VISUALIZACION ####################
#################################################
par(mfrow=c(2,4))
sapply(seq(1,8), function(j)boxplot(x[,j],main=colnames(x)[j],xlab="",col="blue"))
#################################################
############## VISUALIZACION ####################
#################################################
par(mfrow=c(2,4))
sapply(seq(1,8), function(j)boxplot(x[,j],main=colnames(x)[j],xlab="",col="blue"))
x
# Observación de datos
head(x)
# Número de estados y número de variables
dim(x)
n.x = nrow(x)
p.x = ncol(x)
#################################################
############## VISUALIZACION ####################
#################################################
par(mfrow=c(2,4))
sapply(seq(1,8), function(j)boxplot(x[,j],main=colnames(x)[j],xlab="",col="blue"))
sapply(seq(1,8), function(j)boxplot(x[,j],main=colnames(x)[j],xlab="",col="yellow"))
#o
estado = gather(state.x77,var,valor)
library(tidyr)
#o
estado = gather(state.x77,var,valor)
#o
estado = gather(state.x77,variable,value)
library(reshape2)
#o
melt(as.data.frame(state.x77))
#o
estado=melt(as.data.frame(state.x77))
View(estado)
ggplot(state_long, aes(x = variable, y = value)) +
geom_boxplot() +
labs(title = "Boxplots de Variables en state.x77",
x = "Variable",
y = "Valor")
# LIBRARY
library(ggplot2)
ggplot(state_long, aes(x = variable, y = value)) +
geom_boxplot() +
labs(title = "Boxplots de Variables en state.x77",
x = "Variable",
y = "Valor")
ggplot(estado, aes(x = variable, y = value)) +
geom_boxplot() +
labs(title = "Boxplots de Variables en state.x77",
x = "Variable",
y = "Valor")
#o
estado=melt(as.data.frame(state.x77))
ggplot(estado, aes(x = variable, y = value)) +
geom_boxplot() +
labs(title = "Boxplots de Variables en state.x77",
x = "Variable",
y = "Valor")
ggplot(datos_long, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free") +
labs(title = "Boxplots de Variables",
x = "Variable",
y = "Valor")
#o
datos_long=melt(as.data.frame(state.x77))
ggplot(datos_long, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free") +
labs(title = "Boxplots de Variables",
x = "Variable",
y = "Valor")
#o
datos_long=melt(as.data.frame(state.x77))
ggplot(datos_long, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free") +
labs(title = "Boxplots de Variables",
x = "Variable",
y = "Valor")
# BOXPLOTS
par(mfrow=c(2,4))
sapply(seq(1,8), function(j)boxplot(x[,j],main=colnames(x)[j],xlab="",col="yellow"))
# DATA
x = as.data.frame(state.x77)
# Observación de datos
head(x)
# Número de estados y número de variables
dim(x)
n.x = nrow(x)
p.x = ncol(x)
# BOXPLOTS
par(mfrow=c(2,4))
sapply(seq(1,8), function(j)boxplot(x[,j],main=colnames(x)[j],xlab="",col="yellow"))
sapply(seq(1,8), function(j)boxplot(x[,j],main=colnames(x)[j],xlab="",col="yellow"))
# BOXPLOTS
par(mfrow=c(2,4))
sapply(seq(1,8), function(j)boxplot(x[,j],main=colnames(x)[j],xlab="",col="yellow"))
# BOXPLOTS
par(mfrow=c(2,4))
sapply(seq(1,8), function(j)boxplot(x[,j],main=colnames(x)[j],xlab="",col="yellow"))
sapply(seq(1,8),function(j)hist(x[,j],main=colnames(x[j]),xlab="",col="yellow",break="Sturges"))
sapply(seq(1,8),function(j)hist(x[,j],main=colnames(x)[j],xlab="",col="yellow",break="Sturges"))
sapply(seq(1,8),function(j)hist(x[,j],main=colnames(x)[j],xlab="",col="yellow",break=10))
sapply(seq(1,8),function(j)hist(X[,j],main=colnames(X)[j],xlab="",col="blue",breaks = "Sturges"))
sapply(seq(1,8),function(j)hist(x[,j],main=colnames(x)[j],xlab="",col="blue",breaks = "Sturges"))
# Densidad Kernel
par(mfrow=c(2,4))
sapply(seq(1,8),function(j)plot(density(X[,j],kernel="gaussian"),main=colnames(X)[j],xlab="",col="blue",lwd=2))
# DATA
rm(x)
sapply(seq(1,8), function(j)boxplot(X[,j],main=colnames(X)[j],xlab="",col="yellow"))
# DATA
X = as.data.frame(state.x77)
# BOXPLOTS
par(mfrow=c(2,4))
sapply(seq(1,8), function(j)boxplot(X[,j],main=colnames(X)[j],xlab="",col="yellow"))
# HISTOGRAMAS
par(mfrow=c(2,4))
sapply(seq(1,8),function(j)hist(x[,j],main=colnames(x)[j],xlab="",col="blue",breaks = "Sturges"))
# Densidad Kernel
par(mfrow=c(2,4))
sapply(seq(1,8),function(j)plot(density(X[,j],kernel="gaussian"),main=colnames(X)[j],xlab="",col="blue",lwd=2))
# Densidad Kernel con bandwidth óptimo y kernel gaussiano y el Epanechnikov
sapply(seq(1,8),function(j){
plot(density(X[,j],kernel="gaussian"),main=colnames(X)[j],xlab="",col="blue",lwd=2)
lines(density(X[,j],kernel="epanechnikov"),main=colnames(X)[j],xlab="",col="green",lwd=2)}
)
# Scatterplot de las variables Income y Life Expectancy.
attach(X)
par(mfrow=c(1,1)) # Volver a definir una ventana normal
plot(Income,`Life Exp`,pch=19,col="blue",xlab="Income",ylab="Life expectancy")
# 3D-Scatterplots de Income, Life Expectancy y Murder
library(scatterplot3d)
install.packages("scatterplot3d")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("plotly")
# 3D-Scatterplots de Income, Life Expectancy y Murder
library(scatterplot3d)
scatterplot3d(Income,`Life Exp`,Murder,pch=19,color="blue") # 3D scatterplot
scatterplot3d(Income,`Life Exp`,Murder,pch=19,color="blue",type="h") # 3D scatterplot
library(rgl)
open3d() # Abrir una ventana gráfica en 3 dimensiones
plot3d(Income,`Life Exp`,Murder,size=5) # Se pueden rotar los ejes.
library(rgl)
install.packages("rgl")
library(rgl)
open3d() # Abrir una ventana gráfica en 3 dimensiones
plot3d(Income,`Life Exp`,Murder,size=5) # Se pueden rotar los ejes.
library(plotly)
plot_ly(X,x=~Income,y=~`Life Exp`,z=~Murder) # Otra posibilidad
# Scatterplot múltiple de todas los pares de varaibles.
pairs(X,pch=19,col="black")
# Scatterplot múltiple de todas los pares de varaibles.
pairs(X,pch=19,col="blue")
# Scatterplot múltiple de todas los pares de varaibles.
pairs(X,pch=19,col="blue")
library(MASS)
parcoord(X.col="blue",var.label = TRUE)
parcoord(X,col="blue",var.label = TRUE)
# El vector de medias
mu.X = colMeans(X)
mu.X
mu.X
mu.X$mean
# Profundidad de Tukey
library(ddalpha)
install.packages("ddalpha")
# Profundidad de Tukey
library(ddalpha)
depth.X <- depth.halfspace(X,X,num.directions=100000,seed=1) # Obtener la solución aproximada basada en 100000 proyecciones
sort.depth.X <- sort(depth.X,decreasing=TRUE,index.return=TRUE) # Ordenar las profundidades
depth.X.sort <- sort.depth.X$x # Las profundidades ordenadas, desde la más profunda hasta la menos profunda, con respecto al centro
depth.X.sort
depth.X.sort.index <- sort.depth.X$ix # Las filas asociadas a esas profundidades ya ordenadas
depth.X.sort.index
X[depth.X.sort.index[1],]
# La matriz de covarianza y de correlaciones con sus respectivos autovalores.
S.X <- cov(X)
S.X
eigen(S.X) # Autovalores y autovectores de S
sum(eigen(S.X)$values) # Traza de la matriz S como la suma de autovalores
det(S.X) # Determinante de S
R.X <- cor(X)
R.X
eigen(R.X) # Autovalores y autovectores de R
sum(eigen(R.X)$values) # Traza de la matriz R como la suma de autovalores
det(R.X) # Determinante de R
# Estandarizaciones
# Scatterplot matrix
pairs(X,pch=19,col="blue")
# Univariante
sX <- scale(X)
pairs(sX,pch=19,col="blue")
# Multivariante
iS.X <- solve(S.X)
e <- eigen(iS.X)
V <- e$vectors
B <- V %*% diag(sqrt(e$values)) %*% t(V)
Xtil <- scale(X,scale = FALSE)
SX <- Xtil %*% B
colMeans(SX)
cov(SX)
pairs(SX,pch=19,col="blue")
pairs(SX,pch=19,col="blue")
