df_features_y_clean = pd.concat([df_features_clean, y], axis=1, join_axes=[df_features_clean.index])
df_features_clean = df_features_y_clean.iloc[:,0:30]
df_y = df_features_y_clean.iloc[:,30]
plt.figure(figsize=(14,8))
df_features_y_clean.boxplot(by="diagnosis", figsize=(24, 12))
import numpy as np
import scipy as sc
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from math import pi
from pandas.plotting import scatter_matrix
from pandas.plotting import andrews_curves
from sklearn.preprocessing import StandardScaler
# Simulando datos normales multivariantes
library(MASS)
# Generar una muestra distribuida N(mu, Sigma) con correlacion moderada
bivn <- mvrnorm(5000, mu =  c(0,0), Sigma = matrix(c(1, .5, .5, 1), 2) )  # utiliza Mass package
bivn
View(bivn)
# Variables independientes: corr=0
bivn2 <- mvrnorm(1000, mu = c(0, 5), Sigma = matrix(c(1, 0, 0, 1), 2))
View(bivn2)
# Alta correlacion
bivn3 <- mvrnorm(1000, mu = c(0, 5), Sigma = matrix(c(1, 0.9, 0.9, 1), 2))
# Plots
plot(bivn[,1],bivn[,2])
plot(bivn2[,1],bivn2[,2])
plot(bivn3[,1],bivn3[,2])
# Plots
plot(bivn[,1],bivn[,2])
plot(bivn2[,1],bivn2[,2])
plot(bivn3[,1],bivn3[,2])
# Plots
plot(bivn[,1],bivn[,2])
plot(bivn2[,1],bivn2[,2])
plot(bivn3[,1],bivn3[,2])
# Calcular densidades kernel
bivn.kde <- kde2d(bivn[,1], bivn[,2],n=50)   # MASS package
bivn2.kde <- kde2d(bivn2[,1], bivn2[,2], n = 50)
bivn3.kde <- kde2d(bivn3[,1], bivn3[,2], n = 50)
# Contour plot
image(bivn.kde)       # base graphics package
contour(bivn.kde, add = TRUE)     # graphics package
plot(bivn[,1],bivn[,2])
contour(bivn.kde, add = TRUE)
plot(bivn[,1],bivn[,2])
contour(bivn.kde, add = TRUE)
# Contour plot
image(bivn.kde)       # base graphics package
contour(bivn.kde, add = TRUE)     # graphics package
#### Superficie 3-dimensional
# Basic perspective plot
persp(bivn.kde, phi = 45, theta = 30, shade = .1, border = NA) # base graphics package
# RGL interactive plot
library(rgl)
col1 <- heat.colors(length(bivn.kde$z))[rank(bivn.kde$z)]
persp3d(x=bivn.kde, col = col1)
col1 <- heat.colors(length(bivn.kde$z))[rank(bivn.kde$z)]
persp3d(x=bivn.kde, col = col1)
# RGL interactive plot
library(rgl)
col1 <- heat.colors(length(bivn.kde$z))[rank(bivn.kde$z)]
persp3d(x=bivn.kde, col = col1)
col2 <- rainbow(length(bivn2.kde$z))[rank(bivn2.kde$z)]
persp3d(x=bivn2.kde, col = col2)
col3 <- rainbow(length(bivn3.kde$z))[rank(bivn3.kde$z)]
persp3d(x=bivn3.kde, col = col3)
# threejs Javascript plot
install.packages("threejs")
# threejs Javascript plot
library(threejs)
# Desagrupar los datos obtenidos con kde
x <- bivn.kde$x; y <- bivn.kde$y; z <- bivn.kde$z
# Construir coordenadas x,y,z
xx <- rep(x,times=length(y))
yy <- rep(y,each=length(x))
zz <- z; dim(zz) <- NULL
# Rango de
ra <- ceiling(16 * zz/max(zz))
col <- rainbow(16, 2/3)
# Scatter plot interactivo en 3D
scatterplot3js(x=xx,y=yy,z=zz,size=0.2,color = col[ra],bg="black")
bivn.kde
library(corrplot)
### Distribucion de alta dimension
install.packages("corrplot")
### Distribucion de alta dimension
library(corrplot)
library(clusterGeneration)
mu <- rep(0,10)
pdMat <- genPositiveDefMat(10,lambdaLow=10) #Generar auna matriz sigma def positiva
Sigma <- pdMat$Sigma
dim(Sigma) #cuadrada de 10x10
mvn <- mvrnorm(5000, mu = mu, Sigma = Sigma )
corrplot(cor(mvn),
method="ellipse",
tl.pos="n",
)
bivn.kde$x
bivn.kde$y
bivn2.kde$x
bivn
## CONTORNOS ##
# Annotating a filled contour plot
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
library(ellipse)
install.packages("ellipse")
library(ellipse)
library(graphics)
install.packages("grDevices")
library(grDevices)
library(MASS)
library(mvtnorm)
#################################### Example 1
x.points <- seq(-3,4,length.out=100)
y.points <- x.points
z <- matrix(0,nrow=100,ncol=100)
mu <- c(1,1)
sigma <- matrix(c(2,1,1,2),nrow=2)
for (i in 1:100) {
for (j in 1:100) {
z[i,j] <- dmvnorm(c(x.points[i],y.points[j]),
mean=mu,sigma=sigma)
}
}
contour(x.points,y.points,z)
#################################### Example 3
bivn <- mvrnorm(5000, mu =  c(0,0), Sigma = matrix(c(1, 0, 0, 1), 2) )  # utiliza Mass package
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)
filled.contour(x = bivn.kde$x, y = bivn.kde$y , z = bivn.kde$z,plot.axes = { axis(1); axis(2); points(0, 0) })
image(bivn.kde)       # from base graphics package
contour(bivn.kde, add = TRUE)     # from base graphics package
#################################### Example 4
mu =  c(0,0)
Sigma = matrix(c(1, 0, 0, 1), 2)
bivn4 <- mvrnorm(5000, mu , Sigma )
rho <- cor(bivn4)
plot(bivn4, xlab = "X", ylab = "Y",
col = "cyan",
main = "Bivariate Normal with ellipses")
lines(ellipse(rho, level = .90), col="blue")
lines(ellipse(rho, level = .95), col="red")
lines(ellipse(rho, level = .99), col="green")
plot_legend <- c("99% CI green", "95% CI red","90% CI blue")
legend(-4,-2,legend=plot_legend,cex = 1, bty = "n")
#################################### Example 5
# Library
library(tidyverse)
library(ggplot2)
#Generar datos Normales estandar:
bivn = mvrnorm(5000, mu =  c(0,0), Sigma = matrix(c(1, 0, 0, 1), 2) )
a <- data.frame( x=bivn[,1], y=bivn[,2] )
#Generar datos Normales correlacionados:
bivn2 = mvrnorm(5000, mu =  c(0,0), Sigma = matrix(c(1, 0.7, 0.7, 1), 2) )
b <- data.frame( x=bivn2[,1], y=bivn2[,2] )
# Caso 1
# Grafico de contornos
# Solo contorno
ggplot(a, aes(x=x, y=y) ) +
geom_density_2d()
# Solo area
ggplot(a, aes(x=x, y=y) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon")
# Area + contorno
ggplot(a, aes(x=x, y=y) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
# Caso 2
# Grafico de contornos
# Solo contorno
ggplot(b, aes(x=x, y=y) ) +
geom_density_2d()
# Solo area
ggplot(b, aes(x=x, y=y) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon")
# Area + contorno
ggplot(b, aes(x=x, y=y) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
# Normal tridimensional
x <- mvrnorm(500, mu = c(0, 0, 0),
Sigma = rbind(c(1.5, 0.25, 0.5),
c(0.25, 0.75, 1),
c(0.5, 1, 2)))
# Mostrar contornos anidados de regiones de alta densidad
plot(ks::kde(x = x, H = diag(c(rep(1.25, 3)))), drawpoints = TRUE, col.pt = 1)
# Normal tridimensional
x <- mvrnorm(500, mu = c(0, 0, 0),
Sigma = rbind(c(1.5, 0.25, 0.5),
c(0.25, 0.75, 1),
c(0.5, 1, 2)))
# Mostrar contornos anidados de regiones de alta densidad
plot(ks::kde(x = x, H = diag(c(rep(1.25, 3)))), drawpoints = TRUE, col.pt = 1)
# Mostrar contornos anidados de regiones de alta densidad
plot(ks::kde(x = x, H = diag(c(rep(1.25, 3)))), drawpoints = TRUE, col.pt = 1)
rgl::rglwidget()
install.packages("mixtools")
library(mixtools)
library(mvtnorm)
#Generando datos bidimensionales t-student con 3 grados de libertad
## x ~ t_3(0, diag(2))
bivn <- rmvt(1000, sigma = diag(2), df = 3)
plot(bivn)
# Media y matriz de cov
clcenter <- colMeans(bivn)
clcov <- cov(bivn)
# 97.5%, 75%, 50% elipses de tolerancia
ellipse(mu = clcenter, sigma = clcov, alpha = 0.025,col = "blue", lty = 2)
ellipse(mu = clcenter, sigma = clcov, alpha = 0.25,col = "green", lty = 3)
ellipse(mu = clcenter, sigma = clcov, alpha = 0.5,col = "red", lty = 3)
# Media y matriz de cov
clcenter <- colMeans(bivn)
clcov <- cov(bivn)
# 97.5%, 75%, 50% elipses de tolerancia
ellipse(mu = clcenter, sigma = clcov, alpha = 0.025,col = "blue", lty = 2)
ellipse(mu = clcenter, sigma = clcov, alpha = 0.25,col = "green", lty = 3)
ellipse(mu = clcenter, sigma = clcov, alpha = 0.5,col = "red", lty = 3)
# Calcular densidades kernel
library(MASS)
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)   # MASS package
# Calcular densidades kernel
library(MASS)
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)   # MASS package
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 50)   # MASS package
bivn.kde
# Superficie 3-dimensional de la densidad
# RGL interactive plot
library(rgl)
col1 <- heat.colors(length(bivn.kde$z))[rank(bivn.kde$z)]
persp3d(bivn.kde, col = col1)
#Contornos
bivn.kde <- kde2d(bivn[,1], bivn[,2], n = 150)
filled.contour(x = bivn.kde$x, y = bivn.kde$y , z = bivn.kde$z,plot.axes = { axis(1); axis(2); points(0, 0) })
image(bivn.kde)       # from base graphics package
contour(bivn.kde, add = TRUE)     # from base graphics package
library(tidyverse)
library(ggplot2)
a <- data.frame( a1=bivn[,1], a2=bivn[,2] )
# Caso 1
# Grafico de contornos
# Solo contorno
ggplot(a, aes(x=a1, y=a2) ) +
geom_density_2d()
# Solo area
ggplot(a, aes(x=a1, y=a2) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon")
# Area + contorno
ggplot(a, aes(x=a1, y=a2) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
############################################################################################################
#Generando datos bidimensionales t-student con 10 grados de libertad
## x ~ t_10(0, diag(2))
bivn2 <- rmvt(1000, sigma = diag(2), df = 10)
plot(bivn2)
# Media y matriz de cov
clcenter <- colMeans(bivn2)
clcov <- cov(bivn2)
# 97.5%, 75%, 50% elipses de tolerancia
ellipse(mu = clcenter, sigma = clcov, alpha = 0.025,col = "blue", lty = 2)
ellipse(mu = clcenter, sigma = clcov, alpha = 0.25,col = "green", lty = 3)
ellipse(mu = clcenter, sigma = clcov, alpha = 0.5,col = "red", lty = 3)
# Superficie 3-dimensional de la densidad
# RGL interactive plot
library(rgl)
col1 <- heat.colors(length(bivn2.kde$z))[rank(bivn2.kde$z)]
persp3d(bivn2.kde, col = col1)
#Contornos
bivn2.kde <- kde2d(bivn2[,1], bivn2[,2], n = 50)
filled.contour(x = bivn2.kde$x, y = bivn2.kde$y , z = bivn2.kde$z,plot.axes = { axis(1); axis(2); points(0, 0) })
image(bivn2.kde)       # from base graphics package
contour(bivn2.kde, add = TRUE)     # from base graphics package
b <- data.frame( b1=bivn2[,1], b2=bivn2[,2] )
# Caso 2
# Grafico de contornos
# Solo contorno
ggplot(b, aes(x=b1, y=b2) ) +
geom_density_2d()
# Solo area
ggplot(b, aes(x=b1, y=b2) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon")
# Area + contorno
ggplot(b, aes(x=b1, y=b2) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
library(mixtools)
library(MASS)
library(tidyverse)
library(ggplot2)
library(rgl)
#Generando datos bidimensionales Normales con media (0,0) y S=I_2
## x ~ N_2(0, diag(2))
bivn <- mvrnorm(1000, mu = c(0, 0), Sigma = matrix(c(1, 0, 0, 1), 2))
plot(bivn)
#Generando datos bidimensionales Normales con diferente media y cov
## x ~ N_2(mu, diag(2))
bivn2 <- mvrnorm(800, mu = c(2,3), Sigma = matrix(c(1, 0.7, 0.7, 1), 2))
plot(bivn2)
#Mixtura
mix <- rbind(bivn,bivn2)
plot(mix)
# Calcular densidades kernel
mix.kde <- kde2d(mix[,1], mix[,2], n = 50)   # MASS package
col1 <- heat.colors(length(mix.kde$z))[rank(mix.kde$z)]
persp3d(mix.kde, col = col1)
col1 <- heat.colors(length(mix.kde$z))[rank(mix.kde$z)]
persp3d(mix.kde, col = col1)
#Contornos
filled.contour(x = mix.kde$x, y = mix.kde$y , z = mix.kde$z,plot.axes = { axis(1); axis(2); points(0, 0) })
image(mix.kde)       # from base graphics package
contour(mix.kde, add = TRUE)     # from base graphics package
#Contornos
a <- data.frame( a1=mix[,1], a2=mix[,2] )
# Caso 1
# Grafico de contornos
# Solo contorno
ggplot(a, aes(x=a1, y=a2) ) +
geom_density_2d()
# Solo area
ggplot(a, aes(x=a1, y=a2) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon")
# Area + contorno
ggplot(a, aes(x=a1, y=a2) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
###################################################################################################
#Una mixtura menos compleja
#Generando datos bidimensionales Normales con media (0,0) y S=I_2
## x ~ N_2(0, diag(2))
bivn <- mvrnorm(1000, mu = c(0, 0), Sigma = matrix(c(1, 0, 0, 1), 2))
plot(bivn)
#Generando datos bidimensionales Normales con media mu=(5,5) y S=I_2
## x ~ N_2(mu, diag(2))
bivn2 <- mvrnorm(1000, mu = c(5, 5), Sigma = matrix(c(1, 0, 0, 1), 2))
plot(bivn2)
#Mixtura
mix <- rbind(bivn,bivn2)
plot(mix)
# Calcular densidades kernel
mix.kde <- kde2d(mix[,1], mix[,2], n = 50)   # MASS package
# Superficie 3-dimensional de la densidad
# RGL interactive plot
col1 <- heat.colors(length(mix.kde$z))[rank(mix.kde$z)]
persp3d(mix.kde, col = col1)
#Contornos
filled.contour(x = mix.kde$x, y = mix.kde$y , z = mix.kde$z,plot.axes = { axis(1); axis(2); points(0, 0) })
image(mix.kde)       # from base graphics package
contour(mix.kde, add = TRUE)     # from base graphics package
#Contornos
a <- data.frame( a1=mix[,1], a2=mix[,2] )
# Caso 1
# Grafico de contornos
# Solo contorno
ggplot(a, aes(x=a1, y=a2) ) +
geom_density_2d()
# Solo area
ggplot(a, aes(x=a1, y=a2) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon")
# Area + contorno
ggplot(a, aes(x=a1, y=a2) ) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
